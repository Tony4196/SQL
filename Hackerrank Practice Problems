The CITY table is described as follows: 
Field           TYPE
ID              NUMBER
Name            VARCHAR2
Countrycode     VARCHAR2
District        VARCHAR2
Population      NUMBER

Q1. Query All Columns for all American cities in the CITY table with populations larger than 100000. The CountryCode for America is USA.
A1. SELECT * FROM CITY WHERE COUNTRYCODE ='USA' AND POPULATION >'100000'

Q2. Query ALL Columns for all American cities in the CITY table with populations larger than 100000. The CountryCode for America is USA.
A2. SELECT NAME FROM CITY WHERE COUNTRYCODE = 'USA' AND POPULATION > '120000';

Q3. Query ALL Columns (attributes) for every row in the CITY table.
A3. SELECT * FROM CITY;

Q4. Query ALL Columns for a city in CITY with the ID 1661.
A4. SELECT * FROM CITY WHERE ID = '1661';

Q5. Query ALL attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN.
A5. SELECT * FROM CITY WHERE COUNTRYCODE = 'JPN';

Q6. Query the NAMES of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN.
A6. SELECT NAME FROM CITY WHERE COUNTRYCODE = 'JPN';


The STATION table is described as follows:
Field           TYPE
ID              NUMBER
CITY            VARCHAR2
STATE           VARCHAR2
LAT_N           NUMBER
LONG_W          NUMBER

Q1. Query a list of CITY and STATE from the STATION table.
A1. SELECT CITY, STATE FROM STATION;

Q2. Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.
A2. SELECT DISTINCT CITY FROM STATION WHERE MOD(ID,2)=0;

Q3. Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.
A3. SELECT COUNT(CITY) - COUNT(DISTINCT CITY) FROM STATION

Q4. Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If
 there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.
A4.select CITY, length(CITY) from STATION order by length(CITY), CITY limit 1;
select CITY, length(CITY) from STATION order by length(CITY) desc, CITY limit 1;

Q5. Query the list of CITY names STARTING with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.
A5. SELECT DISTINCT CITY FROM STATION WHERE CITY LIKE 'A%' OR CITY LIKE 'E%' OR CITY LIKE 'I%' OR CITY LIKE 'O%' OR CITY LIKE 'U%' ORDER BY CITY ASC;

Q6. Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.
A6. SELECT DISTINCT CITY FROM STATION WHERE CITY LIKE '%A' OR CITY LIKE '%E' OR CITY LIKE '%I' OR CITY LIKE '%O' OR CITY LIKE '%U' ORDER BY CITY ASC;

Q7. Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. 
your result cannot contain duplicates.
A7. SELECT DISTINCT CITY FROM STATION WHERE (CITY LIKE 'A%' OR CITY LIKE 'E%' OR CITY LIKE 'I%' OR CITY LIKE 'O%' OR CITY LIKE 'U%')
AND (CITY LIKE '%A' OR CITY LIKE '%E' OR CITY LIKE '%I' OR CITY LIKE '%O' OR CITY LIKE '%U') ORDER BY CITY ASC;

Q8. Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.
A8. SELECT DISTINCT CITY FROM STATION WHERE UPPER(SUBSTR(CITY,1,1)) NOT IN ('A','E','I','O','U') 
AND LOWER(SUBSTR(CITY,1, 1)) NOT IN ('a','e','i','o','u');

Q9. Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.
A9. SELECT DISTINCT CITY FROM STATION WHERE UPPER(SUBSTR(CITY,LENGTH(CITY),1)) NOT IN ('A','E','I','O','U') 
AND LOWER(SUBSTR(CITY,LENGTH(CITY), 1)) NOT IN ('a','e','i','o','u');

Q10. Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.
A10. SELECT DISTINCT CITY FROM STATION WHERE LOWER(SUBSTR(CITY,1,1)) NOT IN ('a','e','i','o','u') OR LOWER(SUBSTR(CITY,LENGTH(CITY),1)) NOT IN ('a','e','i','o','u');

Q11. Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.
A11. SELECT DISTINCT CITY FROM STATION WHERE LOWER(SUBSTR(CITY,1,1)) NOT IN ('a','e','i','o','u') AND LOWER(SUBSTR(CITY,LENGTH(CITY),1)) NOT IN ('a','e','i','o','u');




HIGHER THAN 75 MARKS
The STUDENTS table is described as follows:
COLUMN       TYPE
ID           INTEGER
NAME         STRING
MARKS        INTEGER

The Name column only contains uppercase (A-Z) and lowercase (a-z) letters.
SAMPLE INPUT:
ID       NAME       MARKS
1        ASHLEY     81
2        SAMANTHA   75
4        JULIA      76
3        BELVET     84

SAMPLE OUTPUT
ASHLEY
JULIA
BELVET

Explanation

Only Ashley, Julia, and Belvet have Marks > . If you look at the last three characters of each of their names, 
there are no duplicates and 'ley' < 'lia' < 'vet'.

Q1. Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. 
If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.
A1. SELECT NAME FROM STUDENTS WHERE MARKS > '75' ORDER BY SUBSTR(NAME, LENGTH(NAME)-2,3), ID;




EMPLOYEE NAMES
Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.

Input Format

The Employee table containing employee data for a company is described as follows:

Column	Type
employee_id	INTEGER
name	STRING
months	INTEGER
salary	INTEGER
where employee_id is an employee's ID number, name is their name, months is the total number of months they've been working for the company, and salary is their monthly salary.

Sample Input

employee_id	name	marks	salary
12228	rose	15	1968
33645	Angela	1	3443
45692	Frank	17	1608
56118	Patrick	7	1345
59725	Lisa	11	2330
74197	Kimberly	16	4372
78454	Bonnie	8	1771
83565	Michael	6	2017
98607	Todd	5	3396
99989	Joe	9	3573
Sample Output

Angela Bonnie Frank Joe Kimberly Lisa Michael Patrick Rose Todd

Solution:

SELECT NAME FROM EMPLOYEE ORDER BY NAME;   


Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than 
$2000 per month who have been employees for less than 10  months. Sort your result by ascending employee_id.

SOLUTION:
SELECT NAME FROM EMPLOYEE WHERE SALARY > '2000' AND MONTHS <'10' ORDER BY EMPLOYEE_ID ASC;


/*
Given a table TRIANGLES that holds data for three fields namely A, B, C.
+-------------+------------+
| Column      |   Type     |
+-------------+------------+
| A           | INTEGER    |
| B           | INTEGER    |
| C           | INTEGER    |
+-------------+------------+
 
Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:
Equilateral   : It's a triangle with  sides of equal length.
Isosceles     : It's a triangle with  sides of equal length.
Scalene       : It's a triangle with  sides of differing lengths.
Not A Triangle: The given values of A, B, and C don't form a triangle.
*/

--Solution

SELECT CASE
WHEN A + B <= C OR A + C <= B OR B + C <= A THEN 'Not A Triangle'
WHEN A = B AND B = C THEN 'Equilateral'
WHEN A = B OR B = C OR A = C THEN 'Isosceles'
ELSE 'Scalene'
END
FROM TRIANGLES;










